/*
 *  Program:    MaklerPoint System
 *  Module:     Main
 *  Language:   Java / Swing
 *  Date:       2010/09/03 13:10
 *  Web:        http://www.maklerpoint.de
 *  Version:    0.6.1
 *
 *  Copyright (C) 2010 Yves Hoppe.  All Rights Reserved.
 *  See License.txt or http://www.maklerpoint.de/copyright for details.
 *
 *  This software is distributed WITHOUT ANY WARRANTY; without even the
 *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 *  above copyright notices for details.
 */

/*
 * WiedervorlagenErinnerungDialog.java
 *
 * Created on Aug 5, 2010, 7:04:50 PM
 */

package de.maklerpoint.office.Gui.Kalender;

/**
 *
 * @author Yves Hoppe <info at yves-hoppe.de>
 */
public class WiedervorlagenErinnerungDialog extends javax.swing.JDialog {

    /** Creates new form WiedervorlagenErinnerungDialog */
    public WiedervorlagenErinnerungDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_ok = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        combo_wiederholung = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jLabel1.setName("jLabel1"); // NOI18N

        btn_ok.setMnemonic('O');
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.maklerpoint.office.start.CRM.class).getContext().getResourceMap(WiedervorlagenErinnerungDialog.class);
        btn_ok.setText(resourceMap.getString("btn_ok.text")); // NOI18N
        btn_ok.setName("btn_ok"); // NOI18N
        btn_ok.setPreferredSize(new java.awt.Dimension(100, 27));
        btn_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_okActionPerformed(evt);
            }
        });

        jSeparator1.setName("jSeparator1"); // NOI18N

        combo_wiederholung.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nicht wiederholen", "In 1 Minute wiederholen", "In 5 Minuten wiederholen", "In 30 Minuten wiederholen", "In 1 Stunde wiederholen", "In 2 Stunden wiederholen", "In 1 Tag wiederholen", "In 1 Woche wiederholen", "--------------------------------------", "1 Stunde vor dem Termin", "2 Stunden vor dem Termin", "1 Tag vor dem Termin" }));
        combo_wiederholung.setName("combo_wiederholung"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_ok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(combo_wiederholung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(14, 14, 14)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combo_wiederholung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(btn_ok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_okActionPerformed
        if(combo_wiederholung.getSelectedIndex() == 0) {
            this.dispose();
        } else {
            //Nicht wiederholen
            //In 1 Minute wiederholen
            //In 5 Minuten wiederholen
            //In 30 Minuten wiederholen
            //In 1 Stunde wiederholen
            //In 2 Stunden wiederholen
            //In 1 Tag wiederholen
            //In 1 Woche wiederholen
            //--------------------------------------
            //1 Stunde vor dem Termin
            //2 Stunden vor dem Termin
            //1 Tag vor dem Termin
//            if(combo_wiederholung.getSelectedIndex() == 0 || combo_wiederholung.getSelectedIndex() == -1) {
//                this.dispose();
//            } else if (combo_wiederholung.getSelectedIndex() == 1) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (60 * 1000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 2) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (5 * 60000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 3) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (30 * 60000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 4) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (60 * 60000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 5) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (120 * 60000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 6) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (24 * 60 * 60000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 7) {
//                termin.setErinnerung(new java.sql.Timestamp(System.currentTimeMillis() + (7 * 24 * 60 * 60000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 8) {
//                JOptionPane.showMessageDialog(null, "Ung√ºltige Wiederholung");
//                return;
//            } else if (combo_wiederholung.getSelectedIndex() == 9) {
//                termin.setErinnerung(new java.sql.Timestamp(termin.getStart().getTime() - (60 * 600000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 10) {
//                termin.setErinnerung(new java.sql.Timestamp(termin.getStart().getTime() - (120 * 600000)));
//            } else if (combo_wiederholung.getSelectedIndex() == 11) {
//                termin.setErinnerung(new java.sql.Timestamp(termin.getStart().getTime() - (24 * 60 * 600000)));
//            }
//            try {
//                boolean success = TermineSQLMethods.updateTermin(DatabaseConnection.open(), termin);
//                if(success == false) {
//                    ShowException.showException("Bei der Speicherung des Erinnerungsdatums ist ein Datenbank Fehler aufgetretten. "
//                            + "Der Termin wurde nicht gefunden.",
//                            ExceptionDialogGui.LEVEL_WARNING, null, "Schwerwiegend: Konnte den Termin nicht speichern");
//                }
//
//                new SchedulerTask().start();
//            } catch (SQLException e) {
//                ShowException.showException("Bei der Speicherung des Erinnerungsdatums ist ein Datenbank Fehler aufgetretten. "
//                        + "Sollte dieser h√§ufiger auftretten wenden Sie sich bitte an den Support.",
//                        ExceptionDialogGui.LEVEL_WARNING, e.getLocalizedMessage(), "Schwerwiegend: Konnte den Termin nicht speichern");
//                Log.databaselogger.fatal("Datenbankfehler: Konnte den neuen Erinnerungstermin nicht speichern", e);
//            }

            this.dispose();
        }
}//GEN-LAST:event_btn_okActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                WiedervorlagenErinnerungDialog dialog = new WiedervorlagenErinnerungDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ok;
    private javax.swing.JComboBox combo_wiederholung;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

}
