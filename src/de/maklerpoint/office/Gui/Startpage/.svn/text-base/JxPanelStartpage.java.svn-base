/*
 *  Program:    MaklerPoint System
 *  Module:     Main
 *  Language:   Java / Swing
 *  Date:       2010/09/03 13:10
 *  Web:        http://www.maklerpoint.de
 *  Version:    0.6.1
 *
 *  Copyright (C) 2010 Yves Hoppe.  All Rights Reserved.
 *  See License.txt or http://www.maklerpoint.de/copyright for details.
 *
 *  This software is distributed WITHOUT ANY WARRANTY; without even the
 *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 *  above copyright notices for details.
 */

/*
 * JxPanelStartpage.java
 *
 * Created on Jul 9, 2010, 5:04:36 PM
 */

package de.acyrance.CRM.Gui.Startpage;

import de.acyrance.CRM.Benutzer.BenutzerObj;
import de.acyrance.CRM.Benutzer.Tools.BenutzerSQLMethods;
import de.acyrance.CRM.CRM;
import de.acyrance.CRM.Database.DatabaseConnection;
import de.acyrance.CRM.Exception.ShowException;
import de.acyrance.CRM.Gui.Exception.ExceptionDialogGui;
import de.acyrance.CRM.Gui.Nachrichten.NeueNachrichtDialog;
import de.acyrance.CRM.Kalender.Aufgaben.AufgabenObj;
import de.acyrance.CRM.Kalender.Termine.TerminObj;
import de.acyrance.CRM.Kunden.FirmenObj;
import de.acyrance.CRM.Kunden.KundenObj;
import de.acyrance.CRM.Logging.Log;
import de.acyrance.CRM.Nachrichten.NachrichtenObj;
import de.acyrance.CRM.Nachrichten.Tools.NachrichtenSQLMethods;
import de.acyrance.CRM.Registry.BasicRegistry;
import de.acyrance.CRM.Registry.KalenderRegistry;
import de.acyrance.CRM.Security.Security;
import de.acyrance.CRM.Security.SecurityTasks;
import de.acyrance.CRM.Table.NachrichtenModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.TableModelEvent;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jdesktop.swingx.JXLabel;
import org.jdesktop.swingx.JXTitledPanel;

/**
 *
 * @author Yves Hoppe <info at yves-hoppe.de>
 */

public class JxPanelStartpage extends JXTitledPanel {

    private int nachrichtenCount;

    private Object[][] nachrichtenData = null;
    private String[] nachrichtenColumnNames = new String[]{"Hidden", "Erstellt von", "Betreff", "Text", "Datum"};
    private TableModel nachrichtenModel = new NachrichtenModel(nachrichtenData, nachrichtenColumnNames);

    private SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm");

    private JDialog nachrichtenBox;

    /** Creates new form JxPanelStartpage */
    public JxPanelStartpage() {
        initComponents();
        loadNachrichten();
        setUpRights();
    }
    
    private void setUpRights(){
        if(!Security.isAllowed(SecurityTasks.STARTNACHRICHT_CREATE)){
            this.btnNeuNachricht.setEnabled(false);
            this.neuNachrichtMenuItem.setEnabled(false);            
        }
        
        if(!Security.isAllowed(SecurityTasks.STARTNACHRICHT_EDIT)){
            this.btnEditNachricht.setEnabled(false);
            this.editNachrichtMenuItem.setEnabled(false);
        }
        
        if(!Security.isAllowed(SecurityTasks.STARTNACHRICHT_DELETE)){
            this.btnDeleteNachricht.setEnabled(false);
            this.deleteNachrichtMenuItem.setEnabled(false);
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableNachrichtenPopupMenu = new javax.swing.JPopupMenu();
        neuNachrichtMenuItem = new javax.swing.JMenuItem();
        editNachrichtMenuItem = new javax.swing.JMenuItem();
        deleteNachrichtMenuItem = new javax.swing.JMenuItem();
        refreshNachrichtMenuItem = new javax.swing.JMenuItem();
        taskpaneAufgaben = new org.jdesktop.swingx.JXTaskPane();
        taskpaneStatistik = new org.jdesktop.swingx.JXTaskPane();
        taskpaneTermine = new org.jdesktop.swingx.JXTaskPane();
        jLabel2 = new javax.swing.JLabel();
        label_logindate = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree_aktiveBenutzer = new javax.swing.JTree();
        taskpaneMitteilungen = new org.jdesktop.swingx.JXTaskPane();
        jToolBar1 = new javax.swing.JToolBar();
        btnNeuNachricht = new javax.swing.JButton();
        btnEditNachricht = new javax.swing.JButton();
        btnDeleteNachricht = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel3 = new javax.swing.JLabel();
        fieldNachrichtenSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_nachrichten = new org.jdesktop.swingx.JXTable();
        taskpaneGeburtstage = new org.jdesktop.swingx.JXTaskPane();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_nachricht = new javax.swing.JEditorPane();

        tableNachrichtenPopupMenu.setName("tableNachrichtenPopupMenu"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.acyrance.CRM.CRM.class).getContext().getResourceMap(JxPanelStartpage.class);
        neuNachrichtMenuItem.setText(resourceMap.getString("neuNachrichtMenuItem.text")); // NOI18N
        neuNachrichtMenuItem.setName("neuNachrichtMenuItem"); // NOI18N
        tableNachrichtenPopupMenu.add(neuNachrichtMenuItem);

        editNachrichtMenuItem.setText(resourceMap.getString("editNachrichtMenuItem.text")); // NOI18N
        editNachrichtMenuItem.setName("editNachrichtMenuItem"); // NOI18N
        tableNachrichtenPopupMenu.add(editNachrichtMenuItem);

        deleteNachrichtMenuItem.setText(resourceMap.getString("deleteNachrichtMenuItem.text")); // NOI18N
        deleteNachrichtMenuItem.setName("deleteNachrichtMenuItem"); // NOI18N
        tableNachrichtenPopupMenu.add(deleteNachrichtMenuItem);

        refreshNachrichtMenuItem.setText(resourceMap.getString("refreshNachrichtMenuItem.text")); // NOI18N
        refreshNachrichtMenuItem.setName("refreshNachrichtMenuItem"); // NOI18N
        tableNachrichtenPopupMenu.add(refreshNachrichtMenuItem);

        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setOpaque(true);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setAutoscrolls(true);
        setName("Form"); // NOI18N

        taskpaneAufgaben.setIcon(resourceMap.getIcon("taskpaneAufgaben.icon")); // NOI18N
        taskpaneAufgaben.setTitle(resourceMap.getString("taskpaneAufgaben.title")); // NOI18N
        taskpaneAufgaben.setName("taskpaneAufgaben"); // NOI18N
        this.loadHeutigeAufgaben();

        taskpaneStatistik.setCollapsed(true);
        taskpaneStatistik.setIcon(resourceMap.getIcon("taskpaneStatistik.icon")); // NOI18N
        taskpaneStatistik.setTitle(resourceMap.getString("taskpaneStatistik.title")); // NOI18N
        taskpaneStatistik.setName("taskpaneStatistik"); // NOI18N

        taskpaneTermine.setIcon(resourceMap.getIcon("taskpaneTermine.icon")); // NOI18N
        taskpaneTermine.setTitle(resourceMap.getString("taskpaneTermine.title")); // NOI18N
        taskpaneTermine.setName("taskpaneTermine"); // NOI18N
        this.loadHeutigeTermine();

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        label_logindate.setText(resourceMap.getString("label_logindate.text")); // NOI18N
        label_logindate.setName("label_logindate"); // NOI18N
        loadLastLoginDate();

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setViewportBorder(null);
        jScrollPane1.setBorder(null);
        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.setOpaque(false);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Benutzer");
        tree_aktiveBenutzer.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree_aktiveBenutzer.setName("tree_aktiveBenutzer"); // NOI18N
        tree_aktiveBenutzer.setOpaque(false);
        tree_aktiveBenutzer.setRootVisible(false);
        this.loadActiveBenutzer();
        jScrollPane1.setViewportView(tree_aktiveBenutzer);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        taskpaneMitteilungen.setAnimated(false);
        taskpaneMitteilungen.setTitle(resourceMap.getString("taskpaneMitteilungen.title")); // NOI18N
        taskpaneMitteilungen.setMaximumSize(new java.awt.Dimension(382, 200));
        taskpaneMitteilungen.setMinimumSize(new java.awt.Dimension(382, 200));
        taskpaneMitteilungen.getContentPane().setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N
        jToolBar1.setPreferredSize(new java.awt.Dimension(400, 30));

        btnNeuNachricht.setIcon(resourceMap.getIcon("btnNeuNachricht.icon")); // NOI18N
        btnNeuNachricht.setText(resourceMap.getString("btnNeuNachricht.text")); // NOI18N
        btnNeuNachricht.setFocusable(false);
        btnNeuNachricht.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnNeuNachricht.setName("btnNeuNachricht"); // NOI18N
        btnNeuNachricht.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNeuNachricht.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNeuNachrichtActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNeuNachricht);

        btnEditNachricht.setIcon(resourceMap.getIcon("btnEditNachricht.icon")); // NOI18N
        btnEditNachricht.setText(resourceMap.getString("btnEditNachricht.text")); // NOI18N
        btnEditNachricht.setFocusable(false);
        btnEditNachricht.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnEditNachricht.setName("btnEditNachricht"); // NOI18N
        btnEditNachricht.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditNachricht.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditNachrichtActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditNachricht);

        btnDeleteNachricht.setIcon(resourceMap.getIcon("btnDeleteNachricht.icon")); // NOI18N
        btnDeleteNachricht.setText(resourceMap.getString("btnDeleteNachricht.text")); // NOI18N
        btnDeleteNachricht.setFocusable(false);
        btnDeleteNachricht.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnDeleteNachricht.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDeleteNachricht.setName("btnDeleteNachricht"); // NOI18N
        btnDeleteNachricht.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteNachricht.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNachrichtActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteNachricht);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jToolBar1.add(jSeparator2);

        jLabel3.setIcon(resourceMap.getIcon("jLabel3.icon")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 15));
        jToolBar1.add(jLabel3);

        fieldNachrichtenSearch.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldNachrichtenSearch.setText(resourceMap.getString("fieldNachrichtenSearch.text")); // NOI18N
        fieldNachrichtenSearch.setName("fieldNachrichtenSearch"); // NOI18N
        fieldNachrichtenSearch.setPreferredSize(new java.awt.Dimension(130, 25));
        jToolBar1.add(fieldNachrichtenSearch);

        btnSearch.setIcon(resourceMap.getIcon("btnSearch.icon")); // NOI18N
        btnSearch.setText(resourceMap.getString("btnSearch.text")); // NOI18N
        btnSearch.setFocusable(false);
        btnSearch.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setName("btnSearch"); // NOI18N
        btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSearch);

        taskpaneMitteilungen.getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        table_nachrichten.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_nachrichten.setColumnControlVisible(true);
        table_nachrichten.setName("table_nachrichten"); // NOI18N
        table_nachrichten.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_nachrichtenMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_nachrichten);

        taskpaneMitteilungen.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        taskpaneGeburtstage.setIcon(resourceMap.getIcon("taskpaneGeburtstage.icon")); // NOI18N
        taskpaneGeburtstage.setTitle(resourceMap.getString("taskpaneGeburtstage.title")); // NOI18N
        taskpaneGeburtstage.setName("taskpaneGeburtstage"); // NOI18N
        this.loadGeburtstage();

        jLabel4.setIcon(resourceMap.getIcon("jLabel4.icon")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setToolTipText(resourceMap.getString("jLabel4.toolTipText")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jScrollPane3.setViewportBorder(null);
        jScrollPane3.setBorder(null);
        jScrollPane3.setName("jScrollPane3"); // NOI18N

        txt_nachricht.setBackground(resourceMap.getColor("txt_nachricht.background")); // NOI18N
        txt_nachricht.setBorder(null);
        txt_nachricht.setContentType(resourceMap.getString("txt_nachricht.contentType")); // NOI18N
        txt_nachricht.setEditable(false);
        txt_nachricht.setName("txt_nachricht"); // NOI18N
        jScrollPane3.setViewportView(txt_nachricht);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentContainer());
        getContentContainer().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(taskpaneTermine, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(taskpaneAufgaben, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(taskpaneStatistik, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(taskpaneGeburtstage, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_logindate))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(taskpaneMitteilungen, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(taskpaneGeburtstage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(taskpaneTermine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(taskpaneAufgaben, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(taskpaneStatistik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(label_logindate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(taskpaneMitteilungen, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNeuNachrichtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNeuNachrichtActionPerformed
        JFrame mainFrame = CRM.getApplication().getMainFrame();
        nachrichtenBox = new NeueNachrichtDialog(mainFrame, false);
        nachrichtenBox.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent e) {
                SwingUtilities.invokeLater(new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        loadNachrichten();
                        return null;
                        }
                    });
                }
        });
        nachrichtenBox.setLocationRelativeTo(mainFrame);
        
        CRM.getApplication().show(nachrichtenBox);
    }//GEN-LAST:event_btnNeuNachrichtActionPerformed

    private void table_nachrichtenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_nachrichtenMouseClicked
        int row = this.table_nachrichten.getSelectedRow();

        if(row == -1)
            return;
        
        NachrichtenObj nachricht = (NachrichtenObj) table_nachrichten.getModel().getValueAt(row, 0);
        
        if(evt.getClickCount() >= 2) {
//            System.out.println("DoubleClick");

            if(!Security.isAllowed(SecurityTasks.STARTNACHRICHT_EDIT)){
                return;
            }
            
            if(nachricht.getBenutzerId() != -1) {
                if(nachricht.getBenutzerId() != BasicRegistry.currentUser.getId() 
                        && !Security.isAllowed(SecurityTasks.STARTNACHRICHT_EDIT)) {
                    Log.logger.warn("Benutzer \"" + BasicRegistry.currentUser + "\" konnte Nachricht \"" +
                            nachricht.getBetreff() + "\" wegen fehlender Rechte nicht bearbeiten");
                    JOptionPane.showMessageDialog(null, "Sie haben keine Berechtigung die Nachricht zu bearbeiten.",
                            "Fehler: Keine Berechtigung", JOptionPane.ERROR);
                    return;
                }                                
            }

            JFrame mainFrame = CRM.getApplication().getMainFrame();
            nachrichtenBox = new NeueNachrichtDialog(mainFrame, false, nachricht);
            nachrichtenBox.addWindowListener(new WindowAdapter() {

                @Override
                public void windowClosed(WindowEvent e) {
                    SwingUtilities.invokeLater(new SwingWorker<Void, Void>() {
                        @Override
                        protected Void doInBackground() throws Exception {
                            loadNachrichten();
                            return null;
                            }
                        });
                    }
            });
            nachrichtenBox.setLocationRelativeTo(mainFrame);          
            CRM.getApplication().show(nachrichtenBox);

        } else {
            setNachricht(nachricht);            
        }

    }//GEN-LAST:event_table_nachrichtenMouseClicked

    private void btnEditNachrichtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditNachrichtActionPerformed
        int row = this.table_nachrichten.getSelectedRow();

        if(row == -1) {
            JOptionPane.showMessageDialog(null, "Sie müssen eine Nachricht auswählen um Sie zu bearbeiten.",
                    "Keine Nachricht ausgewählt", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
       
        NachrichtenObj nachricht = (NachrichtenObj) table_nachrichten.getModel().getValueAt(row, 0);

        if(nachricht.getBenutzerId() != -1) {
            if(nachricht.getBenutzerId() != BasicRegistry.currentUser.getId() 
                    && !Security.isAllowed(SecurityTasks.STARTNACHRICHT_EDIT)) {
                Log.logger.warn("Benutzer \"" + BasicRegistry.currentUser + "\" konnte Nachricht \"" +
                        nachricht.getBetreff() + "\" wegen fehlender Rechte nicht bearbeiten");
                JOptionPane.showMessageDialog(null, "Sie haben keine Berechtigung die Nachricht zu bearbeiten.",
                        "Fehler: Keine Berechtigung", JOptionPane.ERROR);
                return;
            }
        }
                
        JFrame mainFrame = CRM.getApplication().getMainFrame();
        nachrichtenBox = new NeueNachrichtDialog(mainFrame, false, nachricht);
        nachrichtenBox.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent e) {
                SwingUtilities.invokeLater(new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        loadNachrichten();
                        return null;
                        }
                    });
                }
        });
        nachrichtenBox.setLocationRelativeTo(mainFrame);
        
        CRM.getApplication().show(nachrichtenBox);
    }//GEN-LAST:event_btnEditNachrichtActionPerformed

    private void btnDeleteNachrichtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNachrichtActionPerformed
        int row = this.table_nachrichten.getSelectedRow();

        if(row == -1)
            return;

        NachrichtenObj nachricht = (NachrichtenObj) table_nachrichten.getModel().getValueAt(row, 0);

        if(nachricht.getBenutzerId() != -1) {
            if(nachricht.getBenutzerId() != BasicRegistry.currentUser.getId() 
                    && !Security.isAllowed(SecurityTasks.STARTNACHRICHT_DELETE)) {
                Log.logger.warn("Benutzer \"" + BasicRegistry.currentUser + "\" konnte Nachricht \"" +
                        nachricht.getBetreff() + "\" wegen Fehlender Rechte nicht löschen");
                JOptionPane.showMessageDialog(null, "Sie haben keine Berechtigung die Nachricht zu löschen.", 
                        "Fehler: Keine Berechtigung", JOptionPane.ERROR);
                return;
            }
        }

        int answer = JOptionPane.showConfirmDialog(null, "Wollen Sie die Nachricht \"" + nachricht.getBetreff() + 
                "\" wirklich löschen?", "Bestätigung: Nachricht löschen", JOptionPane.YES_NO_OPTION);

        if(answer == JOptionPane.NO_OPTION)
            return;

        try {
            NachrichtenSQLMethods.deleteFromnachrichten(DatabaseConnection.open(), nachricht.getId());
            loadNachrichten();
        } catch (SQLException e) {
            ShowException.showException("Die Nachricht mit dem Betreff = \"" + nachricht.getBetreff() +
                    "\" konnten nicht gelöscht werden.",
                    ExceptionDialogGui.LEVEL_WARNING, e,
                    "Schwerwiegend: Konnte Nachricht nicht löschen");
            Log.databaselogger.fatal("Konnte die Nachricht mit der Id " + nachricht.getId() + " nicht löschen", e);
        }        
    }//GEN-LAST:event_btnDeleteNachrichtActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * 
     */

    public void loadNachrichten() {       
        try {
            NachrichtenObj[] nachrichten = NachrichtenSQLMethods.loadNachrichten(DatabaseConnection.open());

            if(nachrichten != null) {
                nachrichtenData = new Object[nachrichten.length][5];
                
                for(int i = 0; i < nachrichten.length; i++)
                {
                    nachrichtenData[i][0] = nachrichten[i];

                    if(nachrichten[i].getBenutzerId() != -1){
                        BenutzerObj creator = BenutzerSQLMethods.getBenutzer(DatabaseConnection.open(), 
                                nachrichten[i].getBenutzerId());
                        nachrichtenData[i][1] = creator.getVorname() + " " 
                                + creator.getNachname() + " (" + creator.getKennung() + ")";
                    } else {
                        nachrichtenData[i][1] = "MaklerPoint Office";
                    }
                    nachrichtenData[i][2] = nachrichten[i].getBetreff();
                    nachrichtenData[i][3] = nachrichten[i].getContext();

                    nachrichtenData[i][4] = df.format(nachrichten[i].getCreated());
                }

                nachrichtenCount = nachrichten.length;
            } else {
                nachrichtenData = null;
                nachrichtenCount = 0;
            }

            nachrichtenModel = new NachrichtenModel(nachrichtenData, nachrichtenColumnNames);
//            table_nachrichten = new JXTable(nachrichtenModel);
            table_nachrichten.setModel(nachrichtenModel);

            table_nachrichten.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            table_nachrichten.setColumnSelectionAllowed(false);
            table_nachrichten.setCellSelectionEnabled(false);
            table_nachrichten.setRowSelectionAllowed(true);
            table_nachrichten.setAutoCreateRowSorter(true);

            table_nachrichten.setFillsViewportHeight(true);
            table_nachrichten.removeColumn(table_nachrichten.getColumnModel().getColumn(0));

            MouseListener popupListener = new TablePopupListener();
            table_nachrichten.addMouseListener(popupListener);
            table_nachrichten.setColumnControlVisible(true);

            JTableHeader header = table_nachrichten.getTableHeader();
            header.addMouseListener(popupListener);
            header.validate();
            table_nachrichten.packAll();

            table_nachrichten.tableChanged(new TableModelEvent(table_nachrichten.getModel()));
            table_nachrichten.revalidate();

            if(nachrichtenCount != 0) {
                setNachricht(nachrichten[0]);
                table_nachrichten.changeSelection(0, 0, true, false);
            }

        } catch (Exception e) {
            Log.databaselogger.fatal("Fehler: Konnte Nachrichten nicht laden", e);
            ShowException.showException("Die Nachrichten konnten nicht geladen werden",
                    ExceptionDialogGui.LEVEL_WARNING, e,
                    "Schwerwiegend: Konnte Nachrichten nicht laden");            
        }        
    }


    class TablePopupListener extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
          showPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
          showPopup(e);
        }

        private void showPopup(MouseEvent e) {
          if (e.isPopupTrigger()) {
             tableNachrichtenPopupMenu.show(e.getComponent(), e.getX(), e.getY());
          }
        }
    }

    /**
     * 
     */

    public void loadLastLoginDate() {
        label_logindate.setText(df.format(BasicRegistry.currentUser.getLastlogin()));
        label_logindate.revalidate();
    }

    /**
     * 
     */

    public void loadActiveBenutzer() {
        try {
            BenutzerObj[] activeBenutzer = BenutzerSQLMethods.getActiveBenutzer();

            if(activeBenutzer == null) {
                Log.logger.info("Keine Aufgaben in der Datenbank");
                DefaultMutableTreeNode top = new DefaultMutableTreeNode("Keine Benutzer");
                DefaultMutableTreeNode show = new DefaultMutableTreeNode("Keine Benutzer angemeldet");
                top.add(show);
                tree_aktiveBenutzer = new JTree(top);
                tree_aktiveBenutzer.setRootVisible(false);
                tree_aktiveBenutzer.revalidate();
                return;
            } else {
                 DefaultMutableTreeNode top = new DefaultMutableTreeNode("Aktive Benutzer");
                
                 for(int i = 0; i < activeBenutzer.length; i++) {
                     DefaultMutableTreeNode benutzer = new DefaultMutableTreeNode(activeBenutzer[i]);
                     top.add(benutzer);
                 }

                 tree_aktiveBenutzer = new JTree(top);
                 tree_aktiveBenutzer.setRootVisible(false);
                 tree_aktiveBenutzer.revalidate();
            }            

        } catch (Exception e) {
            ShowException.showException("Die aktiven Benutzer konnten nicht geladen werden",
                    ExceptionDialogGui.LEVEL_WARNING, e,
                    "Schwerwiegend: Konnte aktive Benutzer nicht laden");
            Log.databaselogger.fatal("Fehler: Konnte aktive Benutzer nicht laden", e);
        }
    }

    /**
     * 
     */

    public void loadGeburtstage() {

        KundenObj[] kunden = KalenderRegistry.getKundenGeburtstag(new Date());
        BenutzerObj[] ben = KalenderRegistry.getBenutzerGeburtstage(new Date());
        FirmenObj[] firm = KalenderRegistry.getFirmenGeburtstag(new Date());
        
        if(kunden == null 
                && ben == null && firm == null){
            Log.logger.info("Keine Geburtstage heute");
            final JXLabel label = new JXLabel();
            label.setText("Keine Geburtstage heute");
            taskpaneGeburtstage.add(label);
        } else {
            if(kunden != null) {
                for(int i = 0; i < kunden.length; i++) {
                    JXLabel label = new JXLabel();
                    label.setText(kunden[i].toString());
                    taskpaneGeburtstage.add(label);       
                }
            }

            if(firm != null) {
                for(int i = 0; i < firm.length; i++) {
                    JXLabel label = new JXLabel();
                    label.setText(firm[i].toString());
                    taskpaneGeburtstage.add(label);
                }
            }
            
            if(ben != null) {
                for(int i = 0; i < ben.length; i++) {
                    JXLabel label = new JXLabel();
                    label.setText(ben[i].toString());
                    taskpaneGeburtstage.add(label);
                }
            }
                        
        }

        taskpaneGeburtstage.revalidate();
    }

    /**
     * 
     */

    public void loadHeutigeTermine() {
        Date date = new Date(System.currentTimeMillis());
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date);

        TerminObj[] termine = KalenderRegistry.getTermine();
        DefaultMutableTreeNode top = new DefaultMutableTreeNode("top");

        if(termine == null) {
            final JXLabel label = new JXLabel();
            label.setText("Keine Termine heute");
            taskpaneTermine.add(label);
        } else {
            int cnt = 0;

            for(int i = 0; i < termine.length; i++) {
                TerminObj termin = termine[i];

                c2.setTime(termin.getStart());

                boolean same = sameDay(c1, c2);
                if(same) {
                    JXLabel label = new JXLabel();
                    label.setText(termin.toString());
                    taskpaneTermine.add(label);
                    cnt++;
                } else {
                    boolean after = this.afterToday(c1, c2); // Start Datum nicht heute
                   if(after == false) {
                       c2.setTime(termin.getEnde()); // End Datum heute?
                       same = sameDay(c1, c2);
                       if(same) {
                           JXLabel label = new JXLabel();
                           label.setText(termin.toString());
                           taskpaneTermine.add(label);
                           cnt++;
                       } else {
                           after = afterToday(c1, c2);
                           if(after) {
                               JXLabel label = new JXLabel();
                               label.setText(termin.toString());
                               taskpaneTermine.add(label);
                               cnt++;
                           }
                       }
                   }
                }
            }

            if(cnt == 0) {
                final JXLabel label = new JXLabel();
                label.setText("Keine Termine heute");
                taskpaneTermine.add(label);
            }
        }

        taskpaneTermine.revalidate();
    }

    /**
     * 
     */

    public void loadHeutigeAufgaben() {
        Date date = new Date(System.currentTimeMillis());
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date);

        AufgabenObj[] aufgaben = KalenderRegistry.getAufgaben();

        if(aufgaben == null) {
            final JXLabel label = new JXLabel();
            label.setText("Keine Aufgaben heute");
            taskpaneAufgaben.add(label);
        } else {
            int cnt = 0;

            for(int i = 0; i < aufgaben.length; i++)
            {
                AufgabenObj aufgabe = aufgaben[i];
                c2.setTime(aufgabe.getStart());

                boolean same = sameDay(c1, c2);

                if(same) {
                    final JXLabel label = new JXLabel();
                    label.setText(aufgabe.toString());
                    taskpaneAufgaben.add(label);
                    cnt++;
                } else {
                    boolean after = this.afterToday(c1, c2);
                    if(after == false) {
                        c2.setTime(aufgabe.getEnde());
                        same = sameDay(c1, c2);
                        if(same){
                            final JXLabel label = new JXLabel();
                            label.setText(aufgabe.toString());
                            taskpaneAufgaben.add(label);
                            cnt++;
                        } else {
                            after = afterToday(c1, c2);
                            if(after) {
                               final JXLabel label = new JXLabel();
                               label.setText(aufgabe.toString());
                               taskpaneAufgaben.add(label);
                               cnt++;
                           }
                        }
                    }
                }
                
            }

            if(cnt == 0) {
                final JXLabel label = new JXLabel();
                label.setText("Keine Aufgaben heute");
                taskpaneAufgaben.add(label);
            }
        }

        taskpaneAufgaben.revalidate();
    }

    /**
     * 
     * @param c1
     * @param c2
     * @return
     */

    public boolean sameDay(Calendar c1, Calendar c2) {
          return (
            c1.get(Calendar.DAY_OF_YEAR) == c2.get(Calendar.DAY_OF_YEAR) ) &&
              ( c1.get(Calendar.YEAR) == c2.get(Calendar.YEAR) );
    }

    /**
     * 
     * @param c1
     * @param c2
     * @return
     */

    public boolean afterToday(Calendar c1, Calendar c2) {

        if(c1.getTimeInMillis() < c2.getTimeInMillis())
            return true;
        else
            return false;
    }

    /**
     * 
     * @param nach
     */

    private void setNachricht(NachrichtenObj nach){
        StringBuilder sb = new StringBuilder();
        sb.append("<html>");
        sb.append("<body>");
        sb.append("<br><strong>Betreff: ").append(nach.getBetreff());
        sb.append("</strong><br>Datum: ");
        sb.append(df.format(nach.getCreated()));
        if(nach.getCreated() != nach.getModified()){
            sb.append(" (Geändert am: ");
            sb.append(df.format(nach.getModified()));
            sb.append(")");
        }
        sb.append("<br><br />");
        sb.append(nach.getContext().replaceAll("\n", "<br>"));
        sb.append("</body>");
        sb.append("</html>");
        txt_nachricht.setText(sb.toString());
        txt_nachricht.revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnDeleteNachricht;
    public javax.swing.JButton btnEditNachricht;
    public javax.swing.JButton btnNeuNachricht;
    public javax.swing.JButton btnSearch;
    public javax.swing.JMenuItem deleteNachrichtMenuItem;
    public javax.swing.JMenuItem editNachrichtMenuItem;
    public javax.swing.JTextField fieldNachrichtenSearch;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JToolBar.Separator jSeparator2;
    public javax.swing.JToolBar jToolBar1;
    public javax.swing.JLabel label_logindate;
    public javax.swing.JMenuItem neuNachrichtMenuItem;
    public javax.swing.JMenuItem refreshNachrichtMenuItem;
    public javax.swing.JPopupMenu tableNachrichtenPopupMenu;
    public org.jdesktop.swingx.JXTable table_nachrichten;
    public org.jdesktop.swingx.JXTaskPane taskpaneAufgaben;
    public org.jdesktop.swingx.JXTaskPane taskpaneGeburtstage;
    public org.jdesktop.swingx.JXTaskPane taskpaneMitteilungen;
    public org.jdesktop.swingx.JXTaskPane taskpaneStatistik;
    public org.jdesktop.swingx.JXTaskPane taskpaneTermine;
    public javax.swing.JTree tree_aktiveBenutzer;
    public javax.swing.JEditorPane txt_nachricht;
    // End of variables declaration//GEN-END:variables

}
