/*
 *  Program:    MaklerPoint System
 *  Module:     Main
 *  Language:   Java / Swing
 *  Date:       2010/09/03 13:10
 *  Web:        http://www.maklerpoint.de
 *  Version:    0.6.1
 *
 *  Copyright (C) 2010 Yves Hoppe.  All Rights Reserved.
 *  See License.txt or http://www.maklerpoint.de/copyright for details.
 *
 *  This software is distributed WITHOUT ANY WARRANTY; without even the
 *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 *  above copyright notices for details.
 */

/*
 * LogPanel.java
 *
 * Created on Jul 23, 2010, 1:31:28 PM
 */

package de.maklerpoint.office.Gui.Log;

import de.maklerpoint.office.Database.DatabaseConnection;
import de.maklerpoint.office.Konstanten.MPointKonstanten;
import de.maklerpoint.office.Logging.Log;
import de.maklerpoint.office.Registry.BasicRegistry;
import de.maklerpoint.office.System.Configuration.Config;
import de.maklerpoint.office.System.Configuration.DatabaseConfig;
import de.maklerpoint.office.System.Environment;
import de.maklerpoint.office.System.Version;
import de.acyrance.licensor.License;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Yves Hoppe <info at yves-hoppe.de>
 */
public class LogPanel extends javax.swing.JPanel {

    /** Creates new form LogPanel */
    public LogPanel() {
        initComponents();
        setUp();
    }

    private String readfile(String filename) throws FileNotFoundException, IOException {
        try {
            StringBuilder sb = new StringBuilder();

            BufferedReader test = new BufferedReader(new FileReader(filename));
            String input = "";

            while((input = test.readLine()) != null) {
                sb.append(input).append("\n");
            }

            return sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    private void setUp() {
//        TextAreaAppender logTextArea = Appenders.createTextAreaAppender(Layouts.getConsoleLayout(), this);
//        Log.logger.addAppender(logTextArea);
//        Log.databaselogger.addAppender(logTextArea);
//        Log.pluginlogger.addAppender(logTextArea);
        this.text_log.setText(Log.completeLog.toString());
        label_fatalerrors.setText("" + Log.levellog[0]);
        label_warnings.setText("" + Log.levellog[1]);
        label_errors.setText("" + Log.levellog[3]);
        label_infos.setText("" + Log.levellog[2]);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        text_log = new javax.swing.JTextArea();
        label_loglevel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btn_savelog = new javax.swing.JButton();
        btn_uploadlog = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        label_fatalerrors = new javax.swing.JLabel();
        label_warnings = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        label_errors = new javax.swing.JLabel();
        label_infos = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        text_log.setColumns(20);
        text_log.setEditable(false);
        text_log.setLineWrap(true);
        text_log.setRows(5);
        text_log.setWrapStyleWord(true);
        text_log.setName("text_log"); // NOI18N
        jScrollPane1.setViewportView(text_log);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.maklerpoint.office.start.CRM.class).getContext().getResourceMap(LogPanel.class);
        label_loglevel.setText(resourceMap.getString("label_loglevel.text")); // NOI18N
        label_loglevel.setName("label_loglevel"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        btn_savelog.setMnemonic('s');
        btn_savelog.setText(resourceMap.getString("btn_savelog.text")); // NOI18N
        btn_savelog.setName("btn_savelog"); // NOI18N
        btn_savelog.setPreferredSize(new java.awt.Dimension(130, 27));
        btn_savelog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_savelogActionPerformed(evt);
            }
        });

        btn_uploadlog.setMnemonic('h');
        btn_uploadlog.setText(resourceMap.getString("btn_uploadlog.text")); // NOI18N
        btn_uploadlog.setName("btn_uploadlog"); // NOI18N
        btn_uploadlog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_uploadlogActionPerformed(evt);
            }
        });

        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        label_fatalerrors.setText(resourceMap.getString("label_fatalerrors.text")); // NOI18N
        label_fatalerrors.setName("label_fatalerrors"); // NOI18N

        label_warnings.setText(resourceMap.getString("label_warnings.text")); // NOI18N
        label_warnings.setName("label_warnings"); // NOI18N

        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setForeground(resourceMap.getColor("jLabel5.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        label_errors.setText(resourceMap.getString("label_errors.text")); // NOI18N
        label_errors.setName("label_errors"); // NOI18N

        label_infos.setText(resourceMap.getString("label_infos.text")); // NOI18N
        label_infos.setName("label_infos"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_loglevel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_uploadlog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_savelog, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_fatalerrors)
                            .addComponent(label_warnings))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_infos)
                            .addComponent(label_errors))
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(600, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_savelog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(label_loglevel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_uploadlog)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(label_fatalerrors))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(label_warnings)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(label_errors))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(label_infos))))
                        .addGap(22, 22, 22))))
        );

        label_loglevel.setText(String.valueOf(Log.logger.getLevel()));
    }// </editor-fold>//GEN-END:initComponents

    private void btn_savelogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_savelogActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Choose file to save Log");
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                FileWriter writer = new FileWriter(file);
                String text = this.text_log.getText( );
                writer.write(text);
                writer.flush( );
                writer.close( );
            } catch (IOException e) {
                Log.logger.warn("Fehler: Konnte Log Datei nicht speichern", e);
            }
        }
}//GEN-LAST:event_btn_savelogActionPerformed

    private void btn_uploadlogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_uploadlogActionPerformed
        StringBuilder sb = new StringBuilder();

        try {
            sb.append(URLEncoder.encode("clientVersion", "UTF-8")).append("=").append(URLEncoder.encode(Version.version, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientBuild", "UTF-8")).append("=").append(URLEncoder.encode(Version.build_name, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientSerial", "UTF-8")).append("=").append(URLEncoder.encode(License.getHashNumber(), "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientOS", "UTF-8")).append("=").append(URLEncoder.encode(String.valueOf(Environment.OS), "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientOSName", "UTF-8")).append("=").append(URLEncoder.encode(Environment.OS_NAME, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientOSArch", "UTF-8")).append("=").append(URLEncoder.encode(Environment.OS_ARCH, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientOSVersion", "UTF-8")).append("=").append(URLEncoder.encode(Environment.OS_VERSION, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientVMVendor", "UTF-8")).append("=").append(URLEncoder.encode(Environment.VM_VENDOR, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientVMVersion", "UTF-8")).append("=").append(URLEncoder.encode(Environment.VM_VERSION, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientUsername", "UTF-8")).append("=").append(URLEncoder.encode(Environment.USERNAME, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientUserdir", "UTF-8")).append("=").append(URLEncoder.encode(Environment.USERDIR, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("clientEnvironment", "UTF-8")).append("=").append(URLEncoder.encode(DatabaseConfig.getDatabaseName() + ", " + DatabaseConfig.DBNAME + ", " + DatabaseConfig.DATABASE, "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("databaseLog", "UTF-8")).append("=").append(URLEncoder.encode(readfile(Config.LOG_DIR + File.separatorChar + "database.log"), "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("defaultLog", "UTF-8")).append("=").append(URLEncoder.encode(readfile(Config.LOG_DIR + File.separatorChar + "basic.log"), "UTF-8"));
            sb.append("&");
            sb.append(URLEncoder.encode("pluginLog", "UTF-8")).append("=").append(URLEncoder.encode(readfile(Config.LOG_DIR + File.separatorChar + "plugin.log"), "UTF-8"));

//            System.out.println(readfile(Config.LOG_DIR + File.separatorChar + "database.log"));

            URL url = new URL(MPointKonstanten.MP_LOGUPURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(sb.toString());
            wr.flush();

            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                if(line.contains("success"))
                    JOptionPane.showMessageDialog(null, "Das MaklerPoint Office Fehlerprotokoll wurde "
                            + "erfolgreich übertragen. Danke für Ihre Unterstützung!");

                System.out.println("line: " + line);
            }

        } catch (java.net.ConnectException e) {
            Log.logger.warn("Konnte keine Verbindung zum MaklerPoint Server herstellen");
            BasicRegistry.internetAvailable = false;
        } catch (UnsupportedEncodingException e) {
            Log.logger.warn("Fehler beim codieren des Fehlerprotokolls", e);
        } catch (MalformedURLException e) {
            Log.logger.warn("Fehler beim hochladen des Fehlerprotkolls", e);
        } catch (IOException e) {
            Log.logger.warn("Fehler beim hochladen des Fehlerprotkolls", e);
        }
    }//GEN-LAST:event_btn_uploadlogActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_savelog;
    private javax.swing.JButton btn_uploadlog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel label_errors;
    public javax.swing.JLabel label_fatalerrors;
    public javax.swing.JLabel label_infos;
    public static javax.swing.JLabel label_loglevel;
    public javax.swing.JLabel label_warnings;
    public javax.swing.JTextArea text_log;
    // End of variables declaration//GEN-END:variables

}
