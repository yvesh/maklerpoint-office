/*
 *  Program:    MaklerPoint System
 *  Module:     Main
 *  Language:   Java / Swing
 *  Date:       2010/09/03 13:10
 *  Web:        http://www.maklerpoint.de
 *  Version:    0.6.1
 *
 *  Copyright (C) 2010 Yves Hoppe.  All Rights Reserved.
 *  See License.txt or http://www.maklerpoint.de/copyright for details.
 *
 *  This software is distributed WITHOUT ANY WARRANTY; without even the
 *  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 *  above copyright notices for details.
 */

/*
 * AutoBackupDialog.java
 *
 * Created on Aug 6, 2010, 11:10:09 AM
 */
package de.acyrance.CRM.Gui.Backup;

import de.acyrance.CRM.Backup.BackupObj;
import de.acyrance.CRM.Backup.Tools.BackupSQLMethods;
import de.acyrance.CRM.Database.DatabaseConnection;
import de.acyrance.CRM.Exception.ShowException;
import de.acyrance.CRM.Gui.Exception.ExceptionDialogGui;
import de.acyrance.CRM.Logging.Log;
import de.acyrance.CRM.Registry.BenutzerRegistry;
import de.acyrance.CRM.System.Configuration.Config;
import de.acyrance.CRM.Tools.DirectoryTools;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Yves Hoppe <info at yves-hoppe.de>
 */
public class AutoBackupDialog extends javax.swing.JDialog {

    private String foldername = null;

    /** Creates new form AutoBackupDialog */
    public AutoBackupDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadBackupSettings();
    }

    public void showlatestBackup() {
        try {
            BackupObj latestBack = BackupSQLMethods.loadLatestBackup(DatabaseConnection.open());

            this.setSize(this.getWidth(), this.getHeight() - 120);

            if (latestBack != null) {
                SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy HH:mm");

                this.label_lastbackup.setText(df.format(latestBack.getCreated()));

                if (latestBack.isSuccess()) {
                    this.label_lastbackupstatus.setText("Die letzte Sicherung war erfolgreich");
                    this.label_lastbackupstatus.setForeground(Color.green);
                } else {
                    this.label_lastbackupstatus.setText("Die letzte Sicherung war nicht erfolgreich");
                    this.label_lastbackupstatus.setForeground(Color.red);
                }

                if (latestBack.getBenutzerId() == -1) {
                    this.label_creator.setText("(System)");
                } else {
                    this.label_creator.setText("(" + BenutzerRegistry.getBenutzer(latestBack.getBenutzerId(), false) + ")");
                }

            } else {
                this.label_lastbackup.setText("Keine Backups vorhanden");
                this.label_lastbackupstatus.setText("");
                this.label_creator.setText("");
            }

            if (Config.get("autoBackupNextTime", null) != null) {
                this.label_nextbackup.setText(Config.get("autoBackupNextTime", null));
            } else {
                this.label_nextbackup.setText("Keine automatischen Sicherungen geplant.");
            }

        } catch (SQLException e) {
            Log.databaselogger.fatal("Fehler: Konnte Sicherung nicht aus der Datenbank laden", e);
            ShowException.showException("Die Informationen zur letzten Sicherung konnte nicht aus der Datenbank geladen werden",
                    ExceptionDialogGui.LEVEL_WARNING, e, "Schwerwiegend: Konnte Sicherung nicht laden");

        }
    }

    private void loadBackupSettings() {
        boolean autobackup = Config.getConfigBoolean("autoBackup", false);
        String intv = Config.get("autoBackupInterval", null);
        String backc = Config.get("autoBackupCount", null);
        String backz = Config.get("autoBackupZiel", null);

        if (intv != null) {
            this.combo_time.setSelectedItem(intv);
        }

        if (backc != null) {
            this.combo_backupcount.setSelectedItem(backc);
        }

        if (backz != null) {
            this.field_zielordner.setText(backz);
        }
    }

    private void chooseFolder() {
        String file = DirectoryTools.getDirectory();
        if (file != null) {
            this.foldername = file;
            this.field_zielordner.setText(file);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        label_nextbackup = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        label_lastbackupstatus = new javax.swing.JLabel();
        label_creator = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        label_lastbackup = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        combo_time = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        combo_backupcount = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        field_zielordner = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnFileChoose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(de.acyrance.CRM.CRM.class).getContext().getResourceMap(AutoBackupDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jLabel5.setIcon(resourceMap.getIcon("jLabel5.icon")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        label_nextbackup.setText(resourceMap.getString("label_nextbackup.text")); // NOI18N
        label_nextbackup.setName("label_nextbackup"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        label_lastbackupstatus.setForeground(resourceMap.getColor("label_lastbackupstatus.foreground")); // NOI18N
        label_lastbackupstatus.setText(resourceMap.getString("label_lastbackupstatus.text")); // NOI18N
        label_lastbackupstatus.setName("label_lastbackupstatus"); // NOI18N

        label_creator.setText(resourceMap.getString("label_creator.text")); // NOI18N
        label_creator.setName("label_creator"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        label_lastbackup.setText(resourceMap.getString("label_lastbackup.text")); // NOI18N
        label_lastbackup.setName("label_lastbackup"); // NOI18N

        btnSave.setMnemonic('S');
        btnSave.setText(resourceMap.getString("btnSave.text")); // NOI18N
        btnSave.setName("btnSave"); // NOI18N
        btnSave.setPreferredSize(new java.awt.Dimension(100, 27));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setMnemonic('A');
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(100, 27));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        combo_time.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Täglich", "Wöchentlich", "Monatlich", "Niemals" }));
        combo_time.setName("combo_time"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        combo_backupcount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Eine", "Drei", "Fünf", "Unlimitiert" }));
        combo_backupcount.setName("combo_backupcount"); // NOI18N

        jSeparator3.setName("jSeparator3"); // NOI18N

        field_zielordner.setText(resourceMap.getString("field_zielordner.text")); // NOI18N
        field_zielordner.setName("field_zielordner"); // NOI18N
        field_zielordner.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                field_zielordnerMouseClicked(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        btnFileChoose.setIcon(resourceMap.getIcon("btnFileChoose.icon")); // NOI18N
        btnFileChoose.setToolTipText(resourceMap.getString("btnFileChoose.toolTipText")); // NOI18N
        btnFileChoose.setName("btnFileChoose"); // NOI18N
        btnFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(223, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_nextbackup)
                            .addComponent(label_lastbackupstatus)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label_lastbackup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_creator))))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                        .addComponent(combo_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                        .addComponent(combo_backupcount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(field_zielordner, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFileChoose, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(field_zielordner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(btnFileChoose, 0, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_backupcount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(label_lastbackup)
                    .addComponent(label_creator))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(label_lastbackupstatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(label_nextbackup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        showlatestBackup();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void field_zielordnerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_field_zielordnerMouseClicked
        chooseFolder();
    }//GEN-LAST:event_field_zielordnerMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (field_zielordner.getText() == null) {
            JOptionPane.showMessageDialog(null, "Bitte wählen Sie einen Ordner zum speichern der Sicherung(en) aus.");
            return;
        }

//      Täglich
//      Wöchentlich
//      Monatlich
//      Niemals

        if (this.combo_time.getSelectedIndex() == 3) {
            Config.setBoolean("autoBackup", false);
            this.dispose();
            return;
        }

        Config.setBoolean("autoBackup", true);
        Config.set("autoBackupInterval", (String) this.combo_time.getSelectedItem());
        Config.set("autoBackupCount", (String) this.combo_backupcount.getSelectedItem());
        Config.set("autoBackupZiel", this.field_zielordner.getText());

        Calendar cal = Calendar.getInstance();
        SimpleDateFormat df = new SimpleDateFormat("dd.MM.yyyy");

        if (this.combo_time.getSelectedIndex() == 0) {
            Config.set("autoBackupNextTime", df.format(new Date(System.currentTimeMillis())));
        } else if (this.combo_time.getSelectedIndex() == 1) {
            Config.set("autoBackupNextTime", df.format(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 7)));
        } else if (this.combo_time.getSelectedIndex() == 2) {
            Config.set("autoBackupNextTime", df.format(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 30)));
        } else {
            System.out.println("ADD EXCEPTION: Was ist bitte ausgewählt? xx");
        }

        this.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileChooseActionPerformed
        chooseFolder();
}//GEN-LAST:event_btnFileChooseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                AutoBackupDialog dialog = new AutoBackupDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFileChoose;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox combo_backupcount;
    private javax.swing.JComboBox combo_time;
    private javax.swing.JTextField field_zielordner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel label_creator;
    private javax.swing.JLabel label_lastbackup;
    private javax.swing.JLabel label_lastbackupstatus;
    private javax.swing.JLabel label_nextbackup;
    // End of variables declaration//GEN-END:variables
}
